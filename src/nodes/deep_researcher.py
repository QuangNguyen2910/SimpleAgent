# T·ªáp: nodes/deep_researcher.py

from langchain_core.messages import AIMessage, HumanMessage, SystemMessage, ToolMessage 
from pydantic import BaseModel, Field
from typing import List, Dict, Any, Union
from langchain_core.runnables import RunnableConfig
from ..graph.state import State
from langgraph.store.base import BaseStore
import uuid

# --- 1. ƒê·ªãnh nghƒ©a c√°c L∆∞·ª£c ƒë·ªì H√†nh ƒë·ªông (b·∫Øt ch∆∞·ªõc bind_tools) ---

class ToolCall(BaseModel):
    """M·ªôt y√™u c·∫ßu c√≥ c·∫•u tr√∫c ƒë·ªÉ g·ªçi m·ªôt c√¥ng c·ª• c·ª• th·ªÉ v·ªõi c√°c ƒë·ªëi s·ªë."""
    name: str = Field(..., description="T√™n c·ªßa c√¥ng c·ª• c·∫ßn g·ªçi (v√≠ d·ª•: 'search_web', 'evaluate_expression').")
    arguments: Dict[str, Any] = Field(..., description="M·ªôt t·ª´ ƒëi·ªÉn c√°c ƒë·ªëi s·ªë cho c√¥ng c·ª•.")

class FinalAnswer(BaseModel):
    """C√¢u tr·∫£ l·ªùi cu·ªëi c√πng s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ cho ng∆∞·ªùi d√πng."""
    answer: str = Field(..., description="C√¢u tr·∫£ l·ªùi cu·ªëi c√πng to√†n di·ªán cho c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.")

# --- 2. ƒê·ªãnh nghƒ©a L∆∞·ª£c ƒë·ªì ReAct Ch√≠nh ---
# ƒê√¢y l√† ƒëi·ªÉm m·∫•u ch·ªët. N√≥ bu·ªôc LLM ph·∫£i cung c·∫•p c·∫£ l√Ω lu·∫≠n v√† m·ªôt h√†nh ƒë·ªông c√≥ c·∫•u tr√∫c.

class ReActStep(BaseModel):
    """
    ƒê·∫ßu ra c·ªßa m√¥ h√¨nh cho m·ªôt b∆∞·ªõc duy nh·∫•t, ch·ª©a l√Ω lu·∫≠n v√† h√†nh ƒë·ªông ƒë√£ ch·ªçn.
    H√†nh ƒë·ªông ph·∫£i l√† m·ªôt danh s√°ch c√°c l·ªánh g·ªçi c√¥ng c·ª• ho·∫∑c l√† c√¢u tr·∫£ l·ªùi cu·ªëi c√πng.
    """
    reasoning: str = Field(..., description="M·ªôt qu√° tr√¨nh suy nghƒ© chi ti·∫øt, t·ª´ng b∆∞·ªõc. Gi·∫£i th√≠ch k·∫ø ho·∫°ch c·ªßa b·∫°n, nh·ªØng g√¨ b·∫°n bi·∫øt v√† nh·ªØng g√¨ b·∫°n c·∫ßn t√¨m ra.")
    action: Union[List[ToolCall], FinalAnswer] = Field(..., description="H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán. ƒê√¢y s·∫Ω l√† M·ªòT trong hai: m·ªôt danh s√°ch c√°c l·ªánh g·ªçi c√¥ng c·ª• HO·∫∂C c√¢u tr·∫£ l·ªùi cu·ªëi c√πng.")


# --- 3. Prompt H·ªá th·ªëng ƒë·ªÉ h∆∞·ªõng d·∫´n LLM ---

REACT_HYBRID_PROMPT = """B·∫°n l√† m·ªôt tr·ª£ l√Ω nghi√™n c·ª©u r·∫•t th√¥ng minh. M·ª•c ti√™u c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng b·∫±ng c√°ch chia n√≥ th√†nh m·ªôt lo·∫°t c√°c b∆∞·ªõc.

B·∫°n ho·∫°t ƒë·ªông trong m·ªôt v√≤ng l·∫∑p:
1.  **L√Ω lu·∫≠n:** ƒê·∫ßu ti√™n, b·∫°n suy nghƒ©. Ph√¢n t√≠ch y√™u c·∫ßu, th√¥ng tin c√≥ s·∫µn v√† k·∫ø ho·∫°ch c·ªßa b·∫°n.
2.  **H√†nh ƒë·ªông:** D·ª±a tr√™n l√Ω lu·∫≠n c·ªßa b·∫°n, b·∫°n ch·ªçn M·ªòT trong hai h√†nh ƒë·ªông c√≥ th·ªÉ:
    a. **G·ªçi C√¥ng c·ª•:** N·∫øu b·∫°n c·∫ßn th√™m th√¥ng tin, h√£y cung c·∫•p m·ªôt danh s√°ch m·ªôt ho·∫∑c nhi·ªÅu ƒë·ªëi t∆∞·ª£ng `ToolCall`.
    b. **C√¢u tr·∫£ l·ªùi cu·ªëi c√πng:** N·∫øu b·∫°n c√≥ t·∫•t c·∫£ th√¥ng tin c·∫ßn thi·∫øt, h√£y cung c·∫•p `FinalAnswer`.

**C√°c c√¥ng c·ª• c√≥ s·∫µn:**
- `search_web(query: str)`: S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin tr√™n internet.
- `evaluate_expression(expression: str)`: S·ª≠ d·ª•ng c√¥ng c·ª• n√†y cho c√°c ph√©p t√≠nh to√°n h·ªçc.

**ƒê·∫ßu ra c·ªßa b·∫°n PH·∫¢I LU√îN LU√îN l√† m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t h·ª£p l·ªá v·ªõi l∆∞·ª£c ƒë·ªì ƒë∆∞·ª£c y√™u c·∫ßu.**

M·ªôt s·ªë th√¥ng tin t·ª´ ng∆∞·ªùi d√πng:
{user_info}

B·∫Øt ƒë·∫ßu.
"""

# --- C√°c Node v√† C·∫°nh c·ªßa LangGraph ---

def call_agent_and_parse(state: State, config: RunnableConfig, store: BaseStore) -> State:
    """Node g·ªçi LLM, ƒë∆∞·ª£c c·∫•u tr√∫c ƒë·ªÉ xu·∫•t ra m·ªôt ƒë·ªëi t∆∞·ª£ng ReActStep."""
    print("--- Th·ª±c hi·ªán Node: call_agent_and_parse (Hybrid) ---")

    # ... (ph·∫ßn l·∫•y user_info kh√¥ng thay ƒë·ªïi) ...
    user_id = config["configurable"]["user_id"]
    namespace = (user_id, "memories")
    memories = store.search(namespace, query=str(state["messages"][-1].content))
    user_info = "\n".join([d.value["data"] for d in memories])

    llm = config["configurable"]["llm"]
    llm_with_structure = llm.with_structured_output(ReActStep)
    
    messages = state["messages"][-6:] if len(state["messages"]) >= 6 else state["messages"]
    if not any(isinstance(m, SystemMessage) for m in messages):
        messages.insert(0, SystemMessage(content=REACT_HYBRID_PROMPT.format(user_info=user_info)))

    response: ReActStep = llm_with_structure.invoke(messages)
    
    print(f"\nü§î L√ù LU·∫¨N: {response.reasoning}")
    
    # Ki·ªÉm tra lo·∫°i h√†nh ƒë·ªông v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
    if isinstance(response.action, FinalAnswer):
        print(f"‚úÖ H√ÄNH ƒê·ªò·ªòNG: C√¢u tr·∫£ l·ªùi cu·ªëi c√πng")
        # Th√™m AIMessage ch·ª©a l√Ω lu·∫≠n v√† c√¢u tr·∫£ l·ªùi cu·ªëi c√πng
        final_ai_message = AIMessage(content=f"L√Ω lu·∫≠n:\n{response.reasoning}\n\nC√¢u tr·∫£ l·ªùi cu·ªëi c√πng:\n{response.action.answer}")
        state["messages"].append(final_ai_message)
        state["answer"] = response.action.answer
        state["parsed_action"] = None # T√≠n hi·ªáu ƒë·ªÉ k·∫øt th√∫c v√≤ng l·∫∑p
    else: # ƒê√¢y l√† m·ªôt danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng ToolCall
        print(f"üõ†Ô∏è H√ÄNH ƒê·ªòNG: G·ªçi C√¥ng c·ª•")
        # *** THAY ƒê·ªîI CH√çNH ·ªû ƒê√ÇY ***
        # T·∫°o tool_calls v·ªõi ID duy nh·∫•t cho m·ªói l·ªánh g·ªçi
        tool_calls = []
        for tool_call_action in response.action:
            tool_calls.append({
                "name": tool_call_action.name,
                "args": tool_call_action.arguments,
                "id": str(uuid.uuid4()) # T·∫°o ID duy nh·∫•t
            })
            print(f"- C√¥ng c·ª•: {tool_call_action.name}, ƒê·ªëi s·ªë: {tool_call_action.arguments}, ID: {tool_calls[-1]['id']}")

        # T·∫°o m·ªôt AIMessage ch·ª©a c·∫£ l√Ω lu·∫≠n v√† c√°c l·ªánh g·ªçi c√¥ng c·ª• c√≥ c·∫•u tr√∫c
        ai_message_with_tools = AIMessage(
            content=response.reasoning, # Ch·ªâ ch·ª©a l√Ω lu·∫≠n ·ªü ƒë√¢y
            tool_calls=tool_calls
        )
        state["messages"].append(ai_message_with_tools)
        state["parsed_action"] = tool_calls # Chuy·ªÉn c√°c l·ªánh g·ªçi c√¥ng c·ª• c√≥ c·∫•u tr√∫c (v·ªõi ID)

    return state


def execute_tool(state: State, config: RunnableConfig) -> State:
    """Node th·ª±c thi c√°c l·ªánh g·ªçi c√¥ng c·ª• v√† tr·∫£ v·ªÅ c√°c ToolMessage."""
    print("--- Th·ª±c hi·ªán Node: execute_tool (Hybrid) ---")
    
    tool_calls: List[Dict] = state["parsed_action"]
    known_tools = {tool.name: tool for tool in config["configurable"]["research_tools"]} if config["configurable"]["research_tools"] else {}
    
    tool_messages = []
    for tool_call in tool_calls:
        tool_name = tool_call["name"]
        tool_args = tool_call["args"]
        tool_call_id = tool_call["id"]
        
        tool_function = known_tools.get(tool_name)
        if not tool_function:
            observation = f"L·ªói: Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• '{tool_name}'."
        else:
            try:
                observation = tool_function.invoke(tool_args)
            except Exception as e:
                observation = f"L·ªói khi th·ª±c thi c√¥ng c·ª• {tool_name}: {e}"
        
        print(f"üëÅÔ∏è QUAN S√ÅT (t·ª´ {tool_name}):\n{observation}")
        
        # *** KEY FIX IS HERE ***
        # Add the 'name' parameter to the ToolMessage constructor.
        tool_messages.append(ToolMessage(
            content=str(observation),
            tool_call_id=tool_call_id,
            name=tool_name  # <-- This is the required addition for Gemini
        ))

    state["messages"].extend(tool_messages)
    state["parsed_action"] = None 
    return state